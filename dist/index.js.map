{"version":3,"file":"index.js","sources":["../GeoDuckMap/LocationMarker.tsx","../GeoDuckMap/useStopPropagation.tsx","../GeoDuckMap/MapLocationSearch.tsx","../GeoDuckMap/useMapData.ts","../GeoDuckMap/Tooltip.tsx","../GeoDuckMap/YearSelect.tsx","../GeoDuckMap/HistoricalLayers.tsx","../GeoDuckMap/UkraineLayer.tsx","../GeoDuckMap/index.tsx"],"sourcesContent":["import { Marker, useMapEvents } from \"react-leaflet\";\nimport React from \"react\";\n\ninterface LocationMarkerProps {\n  value: [number, number];\n  onChange: (position: [number, number]) => void;\n}\n\nconst LocationMarker: React.FC<LocationMarkerProps> = ({ value, onChange }) => {\n  useMapEvents({\n    click(e: any) {\n      if (!e.latlng) return;\n      const { lat, lng } = e.latlng;\n\n      onChange([lat, lng]);\n    },\n  });\n\n  return value ? <Marker position={value} /> : null;\n};\n\nexport default LocationMarker;\n","import { useEffect, useRef } from \"react\";\nimport { DomEvent } from \"leaflet\";\n\nconst useStopPropagation = () => {\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!elementRef.current) return;\n    DomEvent.disableClickPropagation(elementRef.current);\n  }, [elementRef.current]);\n\n  return elementRef;\n};\n\nexport default useStopPropagation;\n","import { useState, useCallback, memo, useEffect } from \"react\";\nimport { useMap } from \"react-leaflet\";\nimport { OpenStreetMapProvider } from \"leaflet-geosearch\";\nimport { Autocomplete, AutocompleteItem } from \"@heroui/autocomplete\";\n\nimport useStopPropagation from \"./useStopPropagation\";\n\nconst SearchSVG = () => (\n  <svg\n    className=\"w-4 h-4 text-gray-400\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    viewBox=\"0 0 24 24\"\n  >\n    <path\n      d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n    />\n  </svg>\n);\n\nconst PinSVG = () => (\n  <svg\n    className=\"w-4 h-4 text-gray-400 flex-shrink-0\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    viewBox=\"0 0 24 24\"\n  >\n    <path\n      d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n    />\n    <path\n      d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth={2}\n    />\n  </svg>\n);\n\ninterface SearchResult {\n  x: number; // longitude\n  y: number; // latitude\n  label: string;\n  bounds: [[number, number], [number, number]];\n  raw: any;\n}\n\nconst MapLocationSearch = memo(() => {\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const autocompleteRef = useStopPropagation();\n  const map = useMap();\n\n  const provider = new OpenStreetMapProvider({\n    params: {\n      \"accept-language\": \"ua\",\n      countrycodes: \"ua,pl,by,ru,ro,md,tr\",\n      limit: 5,\n      email: \"admin@duckarchive.com\",\n    },\n  });\n\n  const searchLocations = useCallback(\n    async (searchQuery: string) => {\n      if (!searchQuery.trim()) {\n        setResults([]);\n\n        return;\n      }\n\n      try {\n        const searchResults = await provider.search({ query: searchQuery });\n\n        setResults(searchResults as SearchResult[]);\n      } catch {\n        setResults([]);\n      }\n    },\n    [provider],\n  );\n\n  // Debounce search\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      searchLocations(query);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [query]);\n\n  const handleLocationSelect = (result: SearchResult) => {\n    setQuery(result.label);\n\n    // Pan map to selected location\n    map.setView([result.y, result.x], 15);\n\n    // Dispatch custom event for other components to listen to\n    map.fire(\"geosearch/showlocation\", {\n      location: result,\n      marker: null,\n    });\n  };\n\n  const handleInputChange = (value: string) => {\n    setQuery(value);\n  };\n\n  const handleSelect = (key: number | string | null) => {\n    if (key) {\n      const result = results[key as number];\n\n      if (result) {\n        handleLocationSelect(result);\n      }\n    }\n  };\n\n  return (\n    <div\n      ref={autocompleteRef} // Prevents click events from propagating to the map\n      className=\"absolute leaflet-top leaflet-left\"\n    >\n      <Autocomplete\n        aria-label=\"Пошук за сучасною назвою\"\n        className=\"leaflet-control w-auto bg-white rounded-xl shadow\"\n        defaultItems={results}\n        inputValue={query}\n        listboxProps={{\n          emptyContent: \"Нічого не знайдено. Уточніть свій запит.\",\n        }}\n        placeholder=\"Пошук за сучасною назвою\"\n        startContent={<SearchSVG />}\n        variant=\"bordered\"\n        onClick={(e) => e.stopPropagation()}\n        onInputChange={handleInputChange}\n        onMouseDown={(e) => e.stopPropagation()}\n        onSelectionChange={handleSelect}\n      >\n        {(result) => (\n          <AutocompleteItem\n            key={results.indexOf(result)}\n            startContent={<PinSVG />}\n            textValue={result.label}\n          >\n            {result.label}\n          </AutocompleteItem>\n        )}\n      </Autocomplete>\n    </div>\n  );\n});\n\nMapLocationSearch.displayName = \"MapLocationSearch\";\n\nexport default MapLocationSearch;\n","import useSWR from \"swr\";\nimport { useMemo, useState } from \"react\";\n\nconst BASE_URL =\n  \"https://raw.githubusercontent.com/duckarchive/map.duckarchive.com/refs/heads/main/geojson\";\ninterface Collection {\n  year: number;\n  label?: string;\n  url: string;\n}\nexport const countryCollections: Collection[] = [\n  { year: 1500, url: `${BASE_URL}/countries/1500.geojson` },\n  { year: 1530, url: `${BASE_URL}/countries/1530.geojson` },\n  { year: 1600, url: `${BASE_URL}/countries/1600.geojson` },\n  { year: 1650, url: `${BASE_URL}/countries/1650.geojson` },\n  { year: 1700, url: `${BASE_URL}/countries/1700.geojson` },\n  { year: 1715, url: `${BASE_URL}/countries/1715.geojson` },\n  { year: 1783, url: `${BASE_URL}/countries/1783.geojson` },\n  { year: 1800, url: `${BASE_URL}/countries/1800.geojson` },\n  { year: 1815, url: `${BASE_URL}/countries/1815.geojson` },\n  { year: 1880, url: `${BASE_URL}/countries/1880.geojson` },\n  { year: 1900, url: `${BASE_URL}/countries/1900.geojson` },\n  { year: 1914, url: `${BASE_URL}/countries/1914.geojson` },\n  { year: 1920, url: `${BASE_URL}/countries/1920.geojson` },\n  { year: 1930, url: `${BASE_URL}/countries/1930.geojson` },\n  { year: 1938, url: `${BASE_URL}/countries/1938.geojson` },\n  { year: 1945, url: `${BASE_URL}/countries/1945.geojson` },\n  { year: 1960, url: `${BASE_URL}/countries/1960.geojson` },\n  { year: 1991, url: `${BASE_URL}/countries/1991.geojson` },\n];\n\nexport const stateCollections: Collection[] = [\n  { year: 1897, url: `${BASE_URL}/states/1897.geojson` },\n  { year: 1914, url: `${BASE_URL}/states/1914.geojson` },\n  { year: 1937, url: `${BASE_URL}/states/1937.geojson` },\n  { year: 1945, url: `${BASE_URL}/states/1945.geojson` },\n  { year: 1991, url: `${BASE_URL}/states/1991.geojson` },\n];\n\nconst getClosestCollectionUrl = (\n  targetYear: number,\n  collections: Collection[],\n  isStrict: boolean = false\n): string | null => {\n  if (isStrict) {\n    const exactMatch = collections.find(({ year }) => year === targetYear);\n    return exactMatch ? exactMatch.url : null;\n  }\n  const countryYears = collections\n    .filter(({ year }) => year > 0 && year <= targetYear)\n    .sort((a, b) => b.year - a.year);\n\n  return countryYears.length > 0 ? countryYears[0].url : null;\n};\n\n// Fetcher function for SWR\nconst fetcher = (url: string) => fetch(url).then((res) => res.json());\n\ninterface MapData {\n  countries: GeoJSON.FeatureCollection | null;\n  states: GeoJSON.FeatureCollection | null;\n  updateYear: (year: number) => void;\n  isLoading: boolean;\n}\n\nconst useMapData = (defaultYear: number): MapData => {\n  const [year, setYear] = useState(defaultYear);\n\n  const countriesUrl = getClosestCollectionUrl(year, countryCollections);\n  const {\n    data: countriesData,\n    isLoading: isLoadingCountries,\n    isValidating: isValidatingCountries,\n  } = useSWR<GeoJSON.FeatureCollection>(countriesUrl, fetcher, {\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    refreshWhenHidden: false,\n    refreshWhenOffline: false,\n  });\n\n  const statesUrl = getClosestCollectionUrl(year, stateCollections, true);\n  const {\n    data: statesData,\n    isLoading: isLoadingStates,\n    isValidating: isValidatingStates,\n  } = useSWR<GeoJSON.FeatureCollection>(statesUrl, fetcher, {\n    revalidateOnFocus: false,\n    revalidateOnReconnect: false,\n    refreshWhenHidden: false,\n    refreshWhenOffline: false,\n  });\n\n  const countries = useMemo(\n    () => (countriesData || null),\n    [countriesData]\n  );\n\n  const states = useMemo(\n    () => (statesData || null),\n    [statesData]\n  );\n\n  const updateYear = (year: number) => {\n    setYear(year);\n  };\n\n  return {\n    countries,\n    states,\n    updateYear,\n    isLoading:\n      isLoadingCountries ||\n      isLoadingStates ||\n      isValidatingCountries ||\n      isValidatingStates,\n  };\n};\n\nexport default useMapData;\n","import { Card, CardBody } from \"@heroui/card\";\nimport { forwardRef } from \"react\";\n\ninterface MapTooltipProps {\n  level1?: string;\n  level2?: string;\n  level3?: string;\n}\n\nconst MapTooltip: React.FC<MapTooltipProps> = ({ level1, level2, level3 }) => {\n  return (\n    <div className=\"absolute leaflet-bottom leaflet-left\">\n      <Card className=\"leaflet-control max-w-sm pointer-events-none rounded-xl\">\n        <CardBody className=\"py-2\">\n          <div className=\"flex flex-col gap-0\">\n            {level3 && <p className=\"text-large\">{level3}</p>}\n            {level2 && <p className=\"text-small text-default-500\">{level2}</p>}\n            {level1 && <p className=\"text-small text-default-500\">{level1}</p>}\n          </div>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default MapTooltip;\n","import { Button } from \"@heroui/button\";\nimport { Input } from \"@heroui/input\";\nimport React, { useState } from \"react\";\nimport useStopPropagation from \"./useStopPropagation\";\n\n// Year presets\nconst YEAR_PRESETS = [\n  { value: 1897, label: \"Російська Імперія\" },\n  { value: 1914, label: \"WWI\" },\n  { value: 1937, label: \"Перед WWII\" },\n  { value: 1945, label: \"Після WWII\" },\n  { value: 1991, label: \"Незалежність\" },\n];\n\nconst validateYear = (yearStr: string): boolean => {\n  const yearNum = parseInt(yearStr, 10);\n\n  return /^\\d{4}$/.test(yearStr) && yearNum >= 1500 && yearNum <= 1991;\n};\n\ninterface YearSelectProps {\n  value: number;\n  onChange: (year: number) => void;\n}\n\nconst YearSelect: React.FC<YearSelectProps> = (\n  ({ value, onChange }) => {\n    const [yearInput, setYearInput] = useState(value.toString());\n    const [showPresets, setShowPresets] = useState(false);\n    const [isInvalid, setIsInvalid] = useState(false);\n    const yearSelectRef = useStopPropagation();\n\n    const handleYearInputChange = (value: string) => {\n      // Only allow digits and limit to 4 characters\n      const numericValue = value.replace(/\\D/g, \"\").slice(0, 4);\n\n      setYearInput(numericValue);\n\n      if (numericValue.length === 4) {\n        const isValid = validateYear(numericValue);\n\n        setIsInvalid(!isValid);\n\n        if (isValid) {\n          onChange(parseInt(numericValue, 10));\n        }\n      } else {\n        setIsInvalid(false);\n      }\n    };\n\n    const handlePresetSelect = (presetYear: number) => {\n      setYearInput(presetYear.toString());\n      onChange(presetYear);\n      setShowPresets(false);\n      setIsInvalid(false);\n    };\n\n    const handleInputFocus = () => {\n      setShowPresets(true);\n    };\n\n    const handleInputBlur = () => {\n      // Delay hiding presets to allow clicking on them\n      setTimeout(() => setShowPresets(false), 150);\n    };\n\n    return (\n      <div ref={yearSelectRef} className=\"absolute leaflet-top leaflet-right\">\n        <div className=\"leaflet-control bg-white rounded-xl shadow\">\n          <Input\n            classNames={{\n              inputWrapper: \"bg-default-100 relative\",\n              input: \"text-sm\",\n            }}\n            errorMessage={isInvalid ? \"Введіть рік від 1600 до 2025\" : \"\"}\n            isInvalid={isInvalid}\n            placeholder=\"1897\"\n            type=\"text\"\n            value={yearInput}\n            variant=\"bordered\"\n            onBlur={handleInputBlur}\n            onFocus={handleInputFocus}\n            onValueChange={handleYearInputChange}\n          />\n\n          {showPresets && (\n            <div className=\"flex flex-col gap-1 p-2\">\n              {YEAR_PRESETS.map((preset) => (\n                <Button\n                  key={preset.value}\n                  className=\"text-xs justify-start\"\n                  color=\"default\"\n                  size=\"sm\"\n                  variant={value === preset.value ? \"flat\" : \"bordered\"}\n                  onPress={() => handlePresetSelect(preset.value)}\n                >\n                  {preset.value} - {preset.label}\n                </Button>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default YearSelect;\n","import { Layer } from \"leaflet\";\nimport {\n  forwardRef,\n  memo,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { GeoJSON, GeoJSONProps } from \"react-leaflet\";\nimport { Spinner } from \"@heroui/spinner\";\n\nimport useMapData from \"./useMapData\";\nimport MapTooltip from \"./Tooltip\";\nimport YearSelect from \"./YearSelect\";\nimport { Feature } from \"geojson\";\n\nconst colorPalette = [\n  \"green\",\n  \"darkblue\",\n  \"purple\",\n  \"orange\",\n  \"blue\",\n  \"red\",\n  \"yellow\",\n];\n\nconst getCountryFeatureColor = (feature: Feature) => {\n  const id = (feature.properties?.admin_level_1_ID || feature.id || 0);\n  if (id === 22) {\n    // Special case for Ukraine\n    return \"gold\";\n  }\n  const colorIndex = id % colorPalette.length;\n  return colorPalette[colorIndex];\n};\n\nconst getStyle = (feature: Feature | undefined, isHighlight: boolean, weight = 1) => {\n  const countryColor = feature ? getCountryFeatureColor(feature) : \"gray\";\n  return {\n    color: countryColor,\n    fillColor: countryColor,\n    weight,\n    opacity: isHighlight ? 1 : 0.5,\n    fillOpacity: isHighlight ? 0.1 : 0,\n    interactive: true,\n  };\n}\n\nconst CountriesLayer = memo(\n  forwardRef<L.GeoJSON, GeoJSONProps>(({ data, onEachFeature }, ref) =>\n    data ? (\n      <GeoJSON\n        ref={ref}\n        data={data}\n        style={(feature) => getStyle(feature, false, 0)}\n        onEachFeature={onEachFeature}\n      />\n    ) : null\n  )\n);\n\nCountriesLayer.displayName = \"CountriesLayer\";\n\nconst StatesLayer = memo(({ data, onEachFeature }: GeoJSONProps) =>\n  data ? (\n    <GeoJSON\n      data={data}\n      style={(feature) => getStyle(feature, false, 2)}\n      onEachFeature={onEachFeature}\n    />\n  ) : null\n);\n\nStatesLayer.displayName = \"StatesLayer\";\n\ninterface HistoricalLayersProps {\n  year?: number;\n}\n\nconst HistoricalLayers: React.FC<HistoricalLayersProps> = ({ year = 1897 }) => {\n  const [hoveredCountryFeature, setHoveredCountryFeature] = useState<any>(null);\n  const [hoveredStateFeature, setHoveredStateFeature] = useState<any>(null);\n  const [yearOverride, setYearOverride] = useState(year);\n  const { countries, states, updateYear, isLoading } = useMapData(yearOverride);\n\n  useEffect(() => {\n    updateYear(yearOverride);\n    setHoveredCountryFeature(null);\n    setHoveredStateFeature(null);\n  }, [yearOverride]);\n\n  const onEachCountryFeature = useCallback(\n    (feature: GeoJSON.Feature, layer: Layer) => {\n      layer.on({\n        mouseover: (e) => {\n          setHoveredCountryFeature(feature);\n          e.target.setStyle(getStyle(feature, false, 1));\n        },\n        mouseout: (e) => {\n          setHoveredCountryFeature(null);\n          e.target.setStyle(getStyle(feature, false, 0));\n        },\n      });\n    },\n    []\n  );\n\n  const onEachStateFeature = useCallback(\n    (feature: GeoJSON.Feature, layer: Layer) => {\n      layer.on({\n        mouseover: (e) => {\n          setHoveredStateFeature(feature);\n          const countryFeature = countries?.features.find(\n            (f) => f.id?.toString() === feature.properties?.admin_level_1_ID.toString()\n          );\n          if (countryFeature) {\n            setHoveredCountryFeature(countryFeature);\n          }\n          e.target.setStyle(getStyle(feature, true, 4));\n        },\n        mouseout: (e) => {\n          setHoveredStateFeature(null);\n          e.target.setStyle(getStyle(feature, false, 2));\n        }\n      });\n    },\n    [countries]\n  );\n\n  return (\n    <>\n      {isLoading ? (\n        <div className=\"absolute z-[1001] top-0 left-0 w-full h-full flex items-center justify-center backdrop-blur-sm bg-white/50\">\n          <Spinner />\n        </div>\n      ) : (\n        <>\n          {countries && (\n            <CountriesLayer\n              data={countries}\n              onEachFeature={onEachCountryFeature}\n            />\n          )}\n\n          {states && (\n            <StatesLayer data={states} onEachFeature={onEachStateFeature} />\n          )}\n        </>\n      )}\n      <YearSelect\n        value={yearOverride}\n        onChange={setYearOverride}\n      />\n      {/* Fixed tooltip at bottom left corner */}\n      {(hoveredCountryFeature || hoveredStateFeature) && (\n        <MapTooltip\n          level1={hoveredCountryFeature?.properties?.admin_level_1}\n          level2={hoveredStateFeature?.properties?.admin_level_2}\n          level3={hoveredStateFeature?.properties?.admin_level_3}\n        />\n      )}\n    </>\n  );\n};\n\nexport default HistoricalLayers;\n","import { GeoJSON } from \"react-leaflet\";\nimport useSWR from \"swr\";\n\nconst UKRAINE_URL =\n  \"https://raw.githubusercontent.com/duckarchive/map.duckarchive.com/refs/heads/main/geojson/ukraine.geojson\";\nconst fetcher = (url: string) => fetch(url).then((res) => res.json());\n\nconst UkraineLayer: React.FC = () => {\n  const { data } = useSWR<GeoJSON.FeatureCollection>(\n    UKRAINE_URL,\n    fetcher,\n    {\n      revalidateOnFocus: false,\n      revalidateOnReconnect: false,\n      refreshWhenHidden: false,\n      refreshWhenOffline: false,\n    },\n  );\n\n  return (\n    data && (\n      <GeoJSON\n        data={data}\n        style={{\n          color: \"gray\",\n          weight: 4,\n          fillColor: \"transparent\",\n          opacity: 0.4,\n          interactive: false,\n        }}\n      />\n    )\n  );\n};\n\nexport default UkraineLayer;\n","import \"leaflet-defaulticon-compatibility\";\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.css\";\nimport \"leaflet-geosearch/assets/css/leaflet.css\";\n\nimport React from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\n\nimport LocationMarker from \"./LocationMarker\";\nimport MapLocationSearch from \"./MapLocationSearch\";\n\nimport HistoricalLayers from \"./HistoricalLayers\";\nimport UkraineLayer from \"./UkraineLayer\";\n\n\nexport interface GeoDuckMapProps {\n  position: [number, number];\n  onPositionChange: (pos: [number, number]) => void;\n}\n\nconst GeoDuckMap: React.FC<GeoDuckMapProps> = ({ position, onPositionChange }) => (\n  <MapContainer\n    scrollWheelZoom\n    worldCopyJump\n    center={[49.0139, 31.2858]}\n    style={{ height: \"100%\", width: \"50%\" }}\n    zoom={6}\n    zoomControl={false}\n  >\n    <TileLayer\n      className=\"grayscale\"\n      attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n      url=\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    />\n    <UkraineLayer />\n    <MapLocationSearch />\n    <HistoricalLayers />\n    <LocationMarker value={position} onChange={onPositionChange} />\n  </MapContainer>\n);\n\nexport default GeoDuckMap;\n"],"names":["LocationMarker","value","onChange","useMapEvents","e","lat","lng","jsx","Marker","useStopPropagation","elementRef","useRef","useEffect","DomEvent","SearchSVG","PinSVG","jsxs","MapLocationSearch","memo","query","setQuery","useState","results","setResults","autocompleteRef","map","useMap","provider","OpenStreetMapProvider","searchLocations","useCallback","searchQuery","searchResults","timer","handleLocationSelect","result","Autocomplete","key","AutocompleteItem","BASE_URL","countryCollections","stateCollections","getClosestCollectionUrl","targetYear","collections","isStrict","exactMatch","year","countryYears","a","b","fetcher","url","res","useMapData","defaultYear","setYear","countriesUrl","countriesData","isLoadingCountries","isValidatingCountries","useSWR","statesUrl","statesData","isLoadingStates","isValidatingStates","countries","useMemo","states","MapTooltip","level1","level2","level3","Card","CardBody","YEAR_PRESETS","validateYear","yearStr","yearNum","YearSelect","yearInput","setYearInput","showPresets","setShowPresets","isInvalid","setIsInvalid","yearSelectRef","handleYearInputChange","numericValue","isValid","handlePresetSelect","presetYear","Input","preset","Button","colorPalette","getCountryFeatureColor","feature","id","_a","colorIndex","getStyle","isHighlight","weight","countryColor","CountriesLayer","forwardRef","data","onEachFeature","ref","GeoJSON","StatesLayer","HistoricalLayers","hoveredCountryFeature","setHoveredCountryFeature","hoveredStateFeature","setHoveredStateFeature","yearOverride","setYearOverride","updateYear","isLoading","onEachCountryFeature","layer","onEachStateFeature","countryFeature","f","_b","Fragment","Spinner","_c","UKRAINE_URL","UkraineLayer","GeoDuckMap","position","onPositionChange","MapContainer","TileLayer"],"mappings":"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"}